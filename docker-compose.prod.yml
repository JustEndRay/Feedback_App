# Версія Docker Compose для продакшн середовища
version: '3.8'

services:
  # База даних PostgreSQL
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: feedback
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 30s
    command: >
      postgres
      -c 'max_connections=1000'
      -c 'log_statement=all'
      -c 'log_connections=on'
      -c 'log_disconnections=on'
      -c 'log_duration=on'
      -c 'log_directory=/var/log/postgresql'
      -c 'log_filename=postgresql-%Y-%m-%d_%H%M%S.log'
      -c 'logging_collector=on'
    user: postgres
    init: true

  # Веб-сервіс (Flask додаток)
  web:
    image: ${DOCKER_IMAGE}
    environment:
      FLASK_ENV: production
      FLASK_APP: run.py
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/feedback
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      # Том для статичних файлів
      - static_files:/app/static
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    command: >
      sh -c "
        echo 'Waiting for database...' &&
        while ! pg_isready -h db -U postgres; do
          echo 'Database is not ready yet...'
          sleep 2
        done &&
        echo 'Database is ready!' &&
        sleep 5 &&
        echo 'Initializing database...' &&
        python init_db.py &&
        echo 'Creating admin user...' &&
        python create_admin_user.py &&
        echo 'Starting Gunicorn...' &&
        gunicorn --bind 0.0.0.0:5000 run:app
      "
    # Важливо: порти не відкриваються назовні, доступ тільки через nginx

  # Nginx веб-сервер
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./logs:/var/log/nginx
      # Том для статичних файлів
      - static_files:/var/www/static:ro
    depends_on:
      web:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    # healthcheck:
    #   test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 10s

  # Prometheus для моніторингу
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - app-network
    restart: unless-stopped

  # Grafana для візуалізації
  grafana:
    image: grafana/grafana:latest
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    networks:
      - app-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # Node Exporter для системних метрик
  node-exporter:
    image: prom/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - app-network
    restart: unless-stopped

# Томи для збереження даних
volumes:
  postgres_data:
    driver: local
  static_files:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Мережа для комунікації між сервісами
networks:
  app-network:
    driver: bridge