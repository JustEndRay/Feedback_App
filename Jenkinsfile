pipeline {
    agent any
    
    parameters {
        booleanParam(name: 'FORCE_ROLLBACK', description: '''–ü—Ä–∏–º—É—Å–æ–≤–∏–π —Ä–æ–ª–±–µ–∫ –¥–æ –æ–±—Ä–∞–∑—É –∑ DockerHub
–ì–∞–π–¥ –ø–æ —Ä–æ–ª–±–µ–∫—É:
1. –†–æ–ª–±–µ–∫ –Ω–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–µ–≥:
   ‚Ä¢ –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Ü—é –≥–∞–ª–æ—á–∫—É
   ‚Ä¢ –ó–∞–ª–∏—à—Ç–µ ROLLBACK_TAG –ø–æ—Ä–æ–∂–Ω—ñ–º
   ‚Ä¢ –ó–∞–ø—É—Å—Ç—ñ—Ç—å –ø–∞–π–ø–ª–∞–π–Ω

2. –†–æ–ª–±–µ–∫ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ç–µ–≥:
   ‚Ä¢ –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Ü—é –≥–∞–ª–æ—á–∫—É
   ‚Ä¢ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–≥—É –≤ ROLLBACK_TAG
   ‚Ä¢ –ó–∞–ø—É—Å—Ç—ñ—Ç—å –ø–∞–π–ø–ª–∞–π–Ω''', defaultValue: false)
        string(name: 'ROLLBACK_TAG', defaultValue: '', description: '–¢–µ–≥ DockerHub –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Ä–æ–ª–±–µ–∫—É (–∑–∞–ª–∏—à–∏—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º –¥–ª—è latest)')
        string(name: 'EC2_IP', description: 'IP –∞–¥—Ä–µ—Å–∞ EC2 —ñ–Ω—Å—Ç–∞–Ω—Å—É', defaultValue: '13.38.124.210')
        string(name: 'EC2_USER', description: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á EC2', defaultValue: 'ubuntu')
        booleanParam(name: 'FORCE_REBUILD', description: '''–ú'—è–∫–µ –æ—á–∏—â–µ–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É:
‚Ä¢ –ó—É–ø–∏–Ω—è—î —Ç—ñ–ª—å–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É
‚Ä¢ –í–∏–¥–∞–ª—è—î —Ç—ñ–ª—å–∫–∏ —Ç–æ–º–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É
‚Ä¢ –û—á–∏—â—É—î —Ç—ñ–ª—å–∫–∏ –æ–±—Ä–∞–∑–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É
‚Ä¢ –ó–±–µ—Ä—ñ–≥–∞—î –≤—Å—ñ —ñ–Ω—à—ñ Docker —Ä–µ—Å—É—Ä—Å–∏

–ö–æ–ª–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏:
‚Ä¢ –ü—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö –∑ –ø–æ—Ç–æ—á–Ω–∏–º –∑–∞—Å—Ç–æ—Å—É–Ω–∫–æ–º
‚Ä¢ –î–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫—É –∑ —á–∏—Å—Ç–∏–º–∏ —Ç–æ–º–∞–º–∏
‚Ä¢ –ö–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–±–µ—Ä–µ–≥—Ç–∏ —ñ–Ω—à—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ

–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è (–±–µ–∑ FORCE_REBUILD):
‚Ä¢ –ó—É–ø–∏–Ω—è—î —Ç—ñ–ª—å–∫–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É
‚Ä¢ –ó–±–µ—Ä—ñ–≥–∞—î –≤—Å—ñ —Ç–æ–º–∏ —Ç–∞ –¥–∞–Ω—ñ
‚Ä¢ –û–Ω–æ–≤–ª—é—î —Ç—ñ–ª—å–∫–∏ –∫–æ–¥ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É
‚Ä¢ –Ü–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö –æ–Ω–æ–≤–ª–µ–Ω—å –±–µ–∑ –≤—Ç—Ä–∞—Ç–∏ –¥–∞–Ω–∏—Ö''', defaultValue: false)
        booleanParam(name: 'FORCE_CLEANUP', description: '''–ü–æ–≤–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è EC2 –ø–µ—Ä–µ–¥ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è–º:
‚Ä¢ –í–∏–¥–∞–ª—è—î –í–°–Ü Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
‚Ä¢ –í–∏–¥–∞–ª—è—î –í–°–Ü Docker –æ–±—Ä–∞–∑–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
‚Ä¢ –í–∏–¥–∞–ª—è—î –í–°–Ü Docker —Ç–æ–º–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
‚Ä¢ –û—á–∏—â—É—î –≤–µ—Å—å Docker –∫–µ—à
‚Ä¢ –í–∏–¥–∞–ª—è—î –≤—Å—ñ —Ç–∏–º—á–∞—Å–æ–≤—ñ —Ñ–∞–π–ª–∏

–ö–æ–ª–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏:
‚Ä¢ –ü—Ä–∏ –∫—Ä–∏—Ç–∏—á–Ω–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö –∑ –º—ñ—Å—Ü–µ–º –Ω–∞ –¥–∏—Å–∫—É
‚Ä¢ –ö–æ–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–æ–≤–Ω—ñ—Å—Ç—é –æ—á–∏—Å—Ç–∏—Ç–∏ —Å–µ—Ä–≤–µ—Ä
‚Ä¢ –ü—Ä–∏ –º—ñ–≥—Ä–∞—Ü—ñ—ó –Ω–∞ –Ω–æ–≤–∏–π —Å–µ—Ä–≤–µ—Ä
‚Ä¢ –ö–æ–ª–∏ —ñ–Ω—à—ñ –º–µ—Ç–æ–¥–∏ –Ω–µ –¥–æ–ø–æ–º–æ–≥–ª–∏

‚ö†Ô∏è –£–í–ê–ì–ê: –¶–µ –≤–∏–¥–∞–ª–∏—Ç—å –í–°–Ü Docker —Ä–µ—Å—É—Ä—Å–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ!''', defaultValue: false)
        booleanParam(name: 'SKIP_DOCKERHUB', description: '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –ø—É—à –æ–±—Ä–∞–∑—É –≤ DockerHub (–ø—Ä–∏—à–≤–∏–¥—à–∏—Ç—å —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è)', defaultValue: false)
    }

    environment {
        // Jenkins Credentials
        AWS_SSH_KEY = credentials('aws-ec2-ssh-key')
        SECRET_KEY = credentials('flask-secret-key')
        POSTGRES_PASSWORD = credentials('postgres-password')
        DOCKERHUB_CREDENTIALS = credentials('dockerhub_push')

        // –©–ª—è—Ö–∏ –Ω–∞ EC2
        DEPLOY_DIR = "/home/${params.EC2_USER}/feedback-app-deploy"
        BUILD_NUMBER_TAG = "${env.BUILD_NUMBER}"
        APP_NAME = "feedback-app"
        COMPOSE_FILE = "docker-compose.prod.yml"
        BACKUP_FILE = "previous_version.txt"

        // –ó–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –¥–ª—è —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è
        DOCKER_IMAGE = 'justendray/feedback_app'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('üîç Validate EC2 Connection') {
            steps {
                script {
                    echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ EC2..."
                    
                    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ EC2
                    def maxRetries = 3
                    def retryCount = 0
                    def connected = false
                    
                    while (retryCount < maxRetries && !connected) {
                        try {
                            def result = sh(
                                script: """
                                    timeout 10 ssh -i ${AWS_SSH_KEY} -o StrictHostKeyChecking=no -o ConnectTimeout=5 ${EC2_USER}@${EC2_IP} 'echo "Connection successful"' || exit 1
                                """,
                                returnStdout: true
                            ).trim()
                            
                            if (result.contains("Connection successful")) {
                                connected = true
                                echo "‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ EC2 —É—Å–ø—ñ—à–Ω–µ"
                            }
                        } catch (Exception e) {
                            retryCount++
                            if (retryCount < maxRetries) {
                                echo "‚ö†Ô∏è –°–ø—Ä–æ–±–∞ ${retryCount} –Ω–µ –≤–¥–∞–ª–∞—Å—è. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é..."
                                sleep(5)
                            }
                        }
                    }
                    
                    if (!connected) {
                        error """
                        ‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ EC2 –ø—ñ—Å–ª—è ${maxRetries} —Å–ø—Ä–æ–±.
                        
                        –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:
                        1. EC2 —ñ–Ω—Å—Ç–∞–Ω—Å –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π
                        2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ IP –∞–¥—Ä–µ—Å–∞: ${EC2_IP}
                        3. Security Group –Ω–µ –¥–æ–∑–≤–æ–ª—è—î SSH (–ø–æ—Ä—Ç 22)
                        4. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π SSH –∫–ª—é—á
                        
                        –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ:
                        ‚Ä¢ –°—Ç–∞—Ç—É—Å EC2 —ñ–Ω—Å—Ç–∞–Ω—Å—É –≤ AWS Console
                        ‚Ä¢ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Security Group
                        ‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å IP –∞–¥—Ä–µ—Å–∏
                        ‚Ä¢ –í–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å SSH –∫–ª—é—á–∞
                        """
                    }
                }
            }
        }

        stage('üßπ Force Cleanup on EC2') {
            when {
                expression { return params.FORCE_CLEANUP }
            }
            steps {
                script {
                    echo "üßπ –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ–≤–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è EC2 –ø–µ—Ä–µ–¥ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è–º —Ñ–∞–π–ª—ñ–≤..."
                    def composeFile = COMPOSE_FILE
                    sh "ssh -i ${AWS_SSH_KEY} -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} 'set -e; echo \"üßπ –ü–æ–≤–Ω–µ –æ—á–∏—â–µ–Ω–Ω—è EC2...\"; docker-compose -f ${composeFile} down -v || true; docker rm -f \$(docker ps -aq) || true; docker rmi -f \$(docker images -q) || true; docker volume rm \$(docker volume ls -q) || true; docker system prune -af --volumes'"
                }
            }
        }

        stage('üîç Get Last DockerHub Tag Info') {
            when {
                expression { return !params.SKIP_DOCKERHUB }
            }
            steps {
                script {
                    def tagInfo = sh(
                        script: """
                            curl -s https://hub.docker.com/v2/repositories/justendray/feedback_app/tags?page_size=1 | jq -r '.results[0] | "–¢–µ–≥: \\(.name), –î–∞—Ç–∞: \\(.last_updated)"'
                        """,
                        returnStdout: true
                    ).trim()
                    echo "–û—Å—Ç–∞–Ω–Ω—ñ–π –æ–±—Ä–∞–∑ —É DockerHub: ${tagInfo}"
                }
            }
        }

        stage('üîç Get DockerHub Tags List') {
            when {
                expression { return !params.SKIP_DOCKERHUB }
            }
            steps {
                script {
                    def tagsList = sh(
                        script: """
                            curl -s https://hub.docker.com/v2/repositories/justendray/feedback_app/tags?page_size=5 | jq -r '.results[] | "\\(.name) | \\(.last_updated)"' | paste -sd ';' -
                        """,
                        returnStdout: true
                    ).trim()
                    echo "–û—Å—Ç–∞–Ω–Ω—ñ —Ç–µ–≥–∏ —É DockerHub: ${tagsList}"
                }
            }
        }

        stage('‚úÖ Validate Parameters') {
            steps {
                script {
                    if (!params.EC2_IP) {
                        error("‚ùå –ù–µ –≤–∫–∞–∑–∞–Ω–æ IP –∞–¥—Ä–µ—Å—É EC2 —ñ–Ω—Å—Ç–∞–Ω—Å—É")
                    }
                    
                    if (params.FORCE_ROLLBACK) {
                        echo "üîÑ –†–µ–∂–∏–º –ø—Ä–∏–º—É—Å–æ–≤–æ–≥–æ —Ä–æ–ª–±–µ–∫—É –∑ DockerHub –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ"
                    }
                    
                    echo "‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤–∞–ª—ñ–¥–Ω—ñ. –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –Ω–∞: ${params.EC2_IP}"
                }
            }
        }

        stage('üîÑ Force Rollback from DockerHub') {
            when {
                expression { return params.FORCE_ROLLBACK }
            }
            steps {
                script {
                    def rollbackTag = params.ROLLBACK_TAG?.trim() ? params.ROLLBACK_TAG.trim() : 'latest'
                    echo "üîÑ –í–∏–∫–æ–Ω—É—î–º–æ —Ä–æ–ª–±–µ–∫ –Ω–∞ —Ç–µ–≥: ${rollbackTag}"
                    sh """
                        ssh -i ${AWS_SSH_KEY} -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} '
                            set -e
                            cd ${DEPLOY_DIR}
                            docker-compose -f ${COMPOSE_FILE} down || true
                            echo ${DOCKERHUB_CREDENTIALS_PSW} | docker login -u ${DOCKERHUB_CREDENTIALS_USR} --password-stdin
                            docker pull justendray/feedback_app:${rollbackTag}
                            echo "DOCKER_IMAGE=justendray/feedback_app:${rollbackTag}" > .env
                            echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" >> .env
                            echo "SECRET_KEY=${SECRET_KEY}" >> .env
                            IMAGE_TAG=${rollbackTag} docker-compose -f ${COMPOSE_FILE} up -d
                            echo "‚úÖ –†–æ–ª–±–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–∞–ø—É—â–µ–Ω–æ –æ–±—Ä–∞–∑ –∑ —Ç–µ–≥–æ–º: ${rollbackTag}"
                        '
                    """
                }
            }
        }

        stage('üì¶ Prepare Source Code') {
            when {
                expression { return !params.FORCE_ROLLBACK }
            }
            steps {
                script {
                    echo "üì¶ –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ –∫–æ–¥—É..."

                    sh """
                        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
                        TEMP_DIR=\$(mktemp -d)
                        echo "üìÅ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó: \${TEMP_DIR}"
                        
                        # –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ —É —Ç–∏–º—á–∞—Å–æ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
                        echo "üìã –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤..."
                        rsync -av --exclude='.git' \
                            --exclude='*.tar.gz' \
                            --exclude='*.log' \
                            --exclude='__pycache__' \
                            --exclude='.pytest_cache' \
                            --exclude='venv' \
                            --exclude='.venv' \
                            --exclude='\${workspace}' \
                            --exclude='\${workspace}@tmp' \
                            --exclude='app@tmp' \
                            . \${TEMP_DIR}/
                        
                        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É
                        echo "üì¶ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É..."
                        cd \${TEMP_DIR}
                        tar -czf \${WORKSPACE}/feedback-app-source-${env.BUILD_NUMBER}.tar.gz .
                        cd \${WORKSPACE}
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞—Ä—Ö—ñ–≤—É
                        echo "üìã –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∫–ª—é—á–µ–Ω–Ω—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö —Ñ–∞–π–ª—ñ–≤:"
                        tar -tzf feedback-app-source-${env.BUILD_NUMBER}.tar.gz | grep -E "(init_db.py|create_admin_user.py)" || true
                        
                        echo "üìä –†–æ–∑–º—ñ—Ä –∞—Ä—Ö—ñ–≤—É:"
                        ls -lh feedback-app-source-${env.BUILD_NUMBER}.tar.gz
                        
                        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É
                        if [ ! -f feedback-app-source-${env.BUILD_NUMBER}.tar.gz ]; then
                            echo "‚ùå –ê—Ä—Ö—ñ–≤ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ!"
                            exit 1
                        fi
                        
                        # –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
                        rm -rf \${TEMP_DIR}
                    """
                }
            }
        }

        stage('üöÄ Transfer Files to EC2') {
            steps {
                script {
                    echo "üöÄ –ü–µ—Ä–µ–¥–∞—á–∞ —Ñ–∞–π–ª—ñ–≤ –Ω–∞ EC2..."

                    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ—Å—Ü—è –Ω–∞ –¥–∏—Å–∫—É —Ç–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É
                    sh """
                        echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º—ñ—Å—Ü—è –Ω–∞ –¥–∏—Å–∫—É —Ç–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É..."
                        ssh -i ${AWS_SSH_KEY} -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} '
                            echo "üìä –°—Ç–∞–Ω –¥–∏—Å–∫—É:"
                            df -h
                            
                            echo "üìä –í—ñ–ª—å–Ω–µ –º—ñ—Å—Ü–µ –≤ /tmp:"
                            df -h /tmp
                            
                            echo "üîë –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ /tmp:"
                            ls -la /tmp
                            
                            echo "üßπ –û—á–∏—â–µ–Ω–Ω—è /tmp..."
                            sudo rm -rf /tmp/* || true
                            
                            echo "üìä –°—Ç–∞–Ω –¥–∏—Å–∫—É –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è:"
                            df -h
                            
                            echo "üîë –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å:"
                            touch /tmp/test_write && rm /tmp/test_write && echo "‚úÖ –ü—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å OK" || echo "‚ùå –ù–µ–º–∞—î –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å"
                        '
                    """

                    sh """
                        echo "üì§ –ö–æ–ø—ñ—é–≤–∞–Ω–Ω—è –∞—Ä—Ö—ñ–≤—É –Ω–∞ EC2..."
                        scp -i ${AWS_SSH_KEY} -o StrictHostKeyChecking=no \
                            feedback-app-source-${env.BUILD_NUMBER}.tar.gz \
                            ${params.EC2_USER}@${params.EC2_IP}:/tmp/

                        echo "‚úÖ –§–∞–π–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–∞ EC2"
                    """
                }
            }
        }

        stage('üîß Setup EC2 Environment') {
            steps {
                script {
                    echo "üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ EC2..."
                    sh """
                        ssh -i ${AWS_SSH_KEY} -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} '
                            set -e
                            
                            echo "üîß –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–æ–±–æ—á–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó..."
                            
                            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–±–æ—á–æ—ó –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó
                            sudo mkdir -p ${DEPLOY_DIR}
                            sudo chown -R ${EC2_USER}:${EC2_USER} ${DEPLOY_DIR}
                            cd ${DEPLOY_DIR}
                            
                            # –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ñ–∞–π–ª—ñ–≤
                            rm -rf * .* 2>/dev/null || true
                            
                            # –†–æ–∑–ø–∞–∫—É–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ–¥—É
                            echo "üì¶ –†–æ–∑–ø–∞–∫—É–≤–∞–Ω–Ω—è –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ –∫–æ–¥—É..."
                            tar -xzf /tmp/feedback-app-source-${env.BUILD_NUMBER}.tar.gz
                            
                            # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–æ–≥–æ –∞—Ä—Ö—ñ–≤—É
                            rm -f /tmp/feedback-app-source-${env.BUILD_NUMBER}.tar.gz
                            
                            # –ù–∞–¥–∞–Ω–Ω—è –ø—Ä–∞–≤ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–ª—è —Å–∫—Ä–∏–ø—Ç—ñ–≤
                            chmod +x init_db.py 2>/dev/null || true
                            chmod +x create_admin_user.py 2>/dev/null || true
                            
                            # –ù–∞–¥–∞–Ω–Ω—è –ø—Ä–∞–≤ –Ω–∞ logs –¥–ª—è nginx
                            sudo mkdir -p logs
                            sudo chown 101:101 logs
                            sudo chmod 775 logs
                            
                            echo "‚úÖ –°–µ—Ä–µ–¥–æ–≤–∏—â–µ EC2 –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
                        '
                    """
                }
            }
        }

        stage('üê≥ Setup Docker Environment') {
            steps {
                script {
                    echo "üê≥ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Docker —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞..."

                    sh """
                        ssh -i ${AWS_SSH_KEY} -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} '
                            set -e
                            cd ${DEPLOY_DIR}

                            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Docker
                            if ! command -v docker &> /dev/null; then
                                echo "üê≥ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Docker..."
                                sudo apt-get update
                                sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
                                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
                                echo "deb [arch=\$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \$(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                                sudo apt-get update
                                sudo apt-get install -y docker-ce docker-ce-cli containerd.io
                                sudo systemctl start docker
                                sudo systemctl enable docker
                                sudo usermod -aG docker \$(whoami)
                            fi

                            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Docker Compose
                            if ! command -v docker-compose &> /dev/null; then
                                echo "üîß –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Docker Compose..."
                                DOCKER_COMPOSE_VERSION=\$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep "tag_name" | cut -d\\" -f4)
                                sudo curl -L "https://github.com/docker/compose/releases/download/\${DOCKER_COMPOSE_VERSION}/docker-compose-\$(uname -s)-\$(uname -m)" -o /usr/local/bin/docker-compose
                                sudo chmod +x /usr/local/bin/docker-compose
                            fi

                            # –û—á–∏—â–µ–Ω–Ω—è –ø—Ä–∏ –ø—Ä–∏–º—É—Å–æ–≤—ñ–π –ø–µ—Ä–µ–∑–±—ñ—Ä—Ü—ñ
                            if [ "${params.FORCE_REBUILD}" = "true" ]; then
                                echo "üóëÔ∏è –û—á–∏—â–µ–Ω–Ω—è Docker –∫–µ—à—É..."
                                docker system prune -f || true
                                docker images | grep "${APP_NAME}" | awk '{print \$3}' | xargs -r docker rmi -f || true
                            fi

                            echo "‚úÖ Docker —Å–µ—Ä–µ–¥–æ–≤–∏—â–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ"
                        '
                    """
                }
            }
        }

        stage('üèóÔ∏è Build Application') {
            steps {
                script {
                    echo "üèóÔ∏è –ó–±—ñ—Ä–∫–∞ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É..."

                    // –û—á–∏—â–µ–Ω–Ω—è –¥–∏—Å–∫—É –ø–µ—Ä–µ–¥ –∑–±—ñ—Ä–∫–æ—é
                    sh """
                        echo "üßπ –û—á–∏—â–µ–Ω–Ω—è –¥–∏—Å–∫—É –ø–µ—Ä–µ–¥ –∑–±—ñ—Ä–∫–æ—é..."
                        
                        # –û—á–∏—â–µ–Ω–Ω—è Docker
                        echo "üóëÔ∏è –û—á–∏—â–µ–Ω–Ω—è Docker..."
                        docker system prune -af --volumes || true
                        
                        # –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É apt
                        echo "üßπ –û—á–∏—â–µ–Ω–Ω—è apt –∫–µ—à—É..."
                        sudo apt-get clean || true
                        sudo apt-get autoremove -y || true
                        
                        # –û—á–∏—â–µ–Ω–Ω—è –ª–æ–≥—ñ–≤
                        echo "üìã –û—á–∏—â–µ–Ω–Ω—è –ª–æ–≥—ñ–≤..."
                        sudo find /var/log -type f -name "*.log" -exec truncate -s 0 {} \\; || true
                        sudo find /var/log -type f -name "*.gz" -delete || true
                        sudo journalctl --vacuum-time=1d || true
                        
                        # –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
                        echo "üóëÔ∏è –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤..."
                        sudo rm -rf /tmp/* || true
                        sudo rm -rf /var/tmp/* || true
                        
                        # –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É pip
                        echo "üßπ –û—á–∏—â–µ–Ω–Ω—è pip –∫–µ—à—É..."
                        sudo rm -rf ~/.cache/pip || true
                        
                        # –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É npm
                        echo "üßπ –û—á–∏—â–µ–Ω–Ω—è npm –∫–µ—à—É..."
                        sudo rm -rf ~/.npm || true
                        
                        # –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É yarn
                        echo "üßπ –û—á–∏—â–µ–Ω–Ω—è yarn –∫–µ—à—É..."
                        sudo rm -rf ~/.yarn || true
                        
                        # –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É composer
                        echo "üßπ –û—á–∏—â–µ–Ω–Ω—è composer –∫–µ—à—É..."
                        sudo rm -rf ~/.composer || true
                        
                        # –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É maven
                        echo "üßπ –û—á–∏—â–µ–Ω–Ω—è maven –∫–µ—à—É..."
                        sudo rm -rf ~/.m2 || true
                        
                        # –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É gradle
                        echo "üßπ –û—á–∏—â–µ–Ω–Ω—è gradle –∫–µ—à—É..."
                        sudo rm -rf ~/.gradle || true
                        
                        # –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É sbt
                        echo "üßπ –û—á–∏—â–µ–Ω–Ω—è sbt –∫–µ—à—É..."
                        sudo rm -rf ~/.sbt || true
                        
                        # –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É cargo
                        echo "üßπ –û—á–∏—â–µ–Ω–Ω—è cargo –∫–µ—à—É..."
                        sudo rm -rf ~/.cargo || true
                        
                        # –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É go
                        echo "üßπ –û—á–∏—â–µ–Ω–Ω—è go –∫–µ—à—É..."
                        sudo rm -rf ~/go/pkg || true
                        
                        # –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É rust
                        echo "üßπ –û—á–∏—â–µ–Ω–Ω—è rust –∫–µ—à—É..."
                        sudo rm -rf ~/.rustup || true
                        
                        # –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É node
                        echo "üßπ –û—á–∏—â–µ–Ω–Ω—è node –∫–µ—à—É..."
                        sudo rm -rf ~/.node-gyp || true
                        
                        # –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É python
                        echo "üßπ –û—á–∏—â–µ–Ω–Ω—è python –∫–µ—à—É..."
                        sudo find / -type d -name "__pycache__" -exec rm -rf {} + || true
                        sudo find / -type d -name "*.pyc" -delete || true
                        
                        # –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É systemd
                        echo "üßπ –û—á–∏—â–µ–Ω–Ω—è systemd –∫–µ—à—É..."
                        sudo systemctl daemon-reload || true
                        sudo systemctl reset-failed || true
                        
                        # –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É journald
                        echo "üßπ –û—á–∏—â–µ–Ω–Ω—è journald –∫–µ—à—É..."
                        sudo journalctl --vacuum-time=1d || true
                        
                        # –û—á–∏—â–µ–Ω–Ω—è –∫–µ—à—É snap
                        echo "üßπ –û—á–∏—â–µ–Ω–Ω—è snap –∫–µ—à—É..."
                        sudo snap list --all | awk '/disabled/{print \$1, \$3}' | while read snapname revision; do sudo snap remove "\$snapname" --revision="\$revision"; done || true
                        
                        # –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∞–Ω –¥–∏—Å–∫—É –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è
                        echo "üìä –°—Ç–∞–Ω –¥–∏—Å–∫—É –ø—ñ—Å–ª—è –æ—á–∏—â–µ–Ω–Ω—è:"
                        df -h
                    """

                    // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∑–±—ñ—Ä–∫–∏
                    def buildDate = sh(
                        script: 'date -u +"%Y-%m-%dT%H:%M:%SZ"',
                        returnStdout: true
                    ).trim()

                    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è .dockerignore –¥–ª—è –∑–º–µ–Ω—à–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
                    sh """
                        echo "üìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è .dockerignore..."
                        cat > .dockerignore << 'EOL'
                        .git
                        .gitignore
                        .env
                        *.pyc
                        __pycache__
                        .pytest_cache
                        venv
                        .venv
                        *.log
                        *.tar.gz
                        Jenkinsfile
                        README.md
                        monitoring/
                        nginx/
                        EOL
                    """

                    // –ó–±—ñ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑—É –Ω–∞ Jenkins –∑ –æ–ø—Ç–∏–º—ñ–∑–æ–≤–∞–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
                    sh """
                        echo "üî® –ó–±—ñ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑—É..."
                        DOCKER_BUILDKIT=1 docker build \\
                            --no-cache \\
                            --progress=plain \\
                            --memory=4g \\
                            --memory-swap=4g \\
                            -t ${APP_NAME}:${env.BUILD_NUMBER} \\
                            -t ${APP_NAME}:latest \\
                            --build-arg BUILD_DATE="${buildDate}" \\
                            --build-arg BUILD_NUMBER="${env.BUILD_NUMBER}" \\
                            .

                        echo "‚úÖ –ó–±—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
                    """
                }
            }
        }

        stage('üöÄ Deploy Application') {
            steps {
                script {
                    echo "üöÄ –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É..."

                    // –ü—É—à–∏–º–æ –æ–±—Ä–∞–∑ –Ω–∞ DockerHub –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ—î–º
                    withCredentials([usernamePassword(credentialsId: 'dockerhub_push', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASS')]) {
                        sh """
                            docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASS
                            docker tag ${APP_NAME}:${env.BUILD_NUMBER} justendray/feedback_app:${env.BUILD_NUMBER}
                            docker tag ${APP_NAME}:${env.BUILD_NUMBER} justendray/feedback_app:latest
                            docker push justendray/feedback_app:${env.BUILD_NUMBER}
                            docker push justendray/feedback_app:latest
                        """
                    }

                    // –î–µ–ø–ª–æ–π –Ω–∞ EC2 —á–µ—Ä–µ–∑ pull –∑ DockerHub
                    sh """
                        ssh -i ${AWS_SSH_KEY} -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} '
                            set -e
                            cd ${DEPLOY_DIR}

                            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω—É –≤–µ—Ä—Å—ñ—é –ø–µ—Ä–µ–¥ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è–º
                            if [ -f "${COMPOSE_FILE}" ]; then
                                echo "üì¶ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó..."
                                docker-compose -f ${COMPOSE_FILE} ps | grep ${APP_NAME} | awk "{print \$2}" | cut -d: -f2 > ${BACKUP_FILE}
                            fi

                            echo "üöÄ –ó–∞–ø—É—Å–∫ –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É —á–µ—Ä–µ–∑ Docker Compose..."

                            # –°—Ç–≤–æ—Ä—é—î–º–æ .env —Ñ–∞–π–ª –∑ –∑–º—ñ–Ω–Ω–∏–º–∏ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
                            echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" > .env
                            echo "SECRET_KEY=${SECRET_KEY}" >> .env
                            echo "BUILD_NUMBER=${BUILD_NUMBER}" >> .env
                            echo "DOCKER_IMAGE=justendray/feedback_app:${env.BUILD_NUMBER}" >> .env

                            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –æ–±—Ä–∞–∑ –∑ DockerHub
                            echo "üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Docker –æ–±—Ä–∞–∑—É –∑ DockerHub..."
                            echo ${DOCKERHUB_CREDENTIALS_PSW} | docker login -u ${DOCKERHUB_CREDENTIALS_USR} --password-stdin
                            docker pull justendray/feedback_app:${env.BUILD_NUMBER}

                            # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ Docker Compose
                            echo "üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤..."
                            docker-compose -f docker-compose.prod.yml up -d

                            # –ß–µ–∫–∞—î–º–æ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó
                            echo "‚è≥ –ß–µ–∫–∞—î–º–æ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó..."
                            sleep 10

                            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
                            echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤:"
                            docker-compose -f docker-compose.prod.yml ps

                            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–≥—ñ–≤ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
                            echo "üìã –õ–æ–≥–∏ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:"
                            docker-compose -f docker-compose.prod.yml logs db

                            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
                            echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö:"
                            docker-compose -f docker-compose.prod.yml exec -T db pg_isready -U postgres -d feedback || true

                            echo "‚úÖ –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
                        '
                    """
                }
            }
        }

        stage('üìä Final Status Check') {
            steps {
                script {
                    echo "üìä –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É..."

                    sh """
                        ssh -i ${AWS_SSH_KEY} -o StrictHostKeyChecking=no \
                            ${params.EC2_USER}@${params.EC2_IP} \
                            '
                            cd \${DEPLOY_DIR}
                            echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤:"
                            docker-compose -f \${COMPOSE_FILE} ps

                            echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä—Ç—ñ–≤:"
                            netstat -tlnp | grep -E ":(80|5000|5432)" || echo "–ü–æ—Ä—Ç–∏ –Ω–µ –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É—é—Ç—å—Å—è"
                            '
                    """
                }
            }
        }
    }

    post {
        always {
            script {
                echo "üßπ –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤ –Ω–∞ Jenkins..."
                sh """
                    rm -f feedback-app-source-${env.BUILD_NUMBER}.tar.gz || true
                """
            }
        }

        failure {
            script {
                echo "‚ö†Ô∏è –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è. –ó–∞–ø—É—Å–∫ —Ä–æ–ª–±–µ–∫—É –∑ DockerHub..."
                def rollbackTag = params.ROLLBACK_TAG?.trim() ? params.ROLLBACK_TAG.trim() : 'latest'
                sh """
                    ssh -i ${AWS_SSH_KEY} -o StrictHostKeyChecking=no ${EC2_USER}@${EC2_IP} '
                        set -e
                        cd ${DEPLOY_DIR}
                        docker-compose -f ${COMPOSE_FILE} down || true
                        echo ${DOCKERHUB_CREDENTIALS_PSW} | docker login -u ${DOCKERHUB_CREDENTIALS_USR} --password-stdin
                        docker pull justendray/feedback_app:${rollbackTag}
                        # –°—Ç–≤–æ—Ä—é—î–º–æ .env –∑ —É—Å—ñ–º–∞ –∑–º—ñ–Ω–Ω–∏–º–∏
                        echo "DOCKER_IMAGE=justendray/feedback_app:${rollbackTag}" > .env
                        echo "POSTGRES_PASSWORD=${POSTGRES_PASSWORD}" >> .env
                        echo "SECRET_KEY=${SECRET_KEY}" >> .env
                        IMAGE_TAG=${rollbackTag} docker-compose -f ${COMPOSE_FILE} up -d
                        echo "‚úÖ –†–æ–ª–±–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ó–∞–ø—É—â–µ–Ω–æ –æ–±—Ä–∞–∑ –∑ —Ç–µ–≥–æ–º: ${rollbackTag}"
                        echo "\nüìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ –ø—ñ—Å–ª—è —Ä–æ–ª–±–µ–∫—É:"
                        docker-compose -f ${COMPOSE_FILE} ps
                        echo "\nüìã –õ–æ–≥–∏ web-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–æ—Å—Ç–∞–Ω–Ω—ñ 20 —Ä—è–¥–∫—ñ–≤):"
                        docker-compose -f ${COMPOSE_FILE} logs --tail=20 web || true
                        echo "\nüìã –õ–æ–≥–∏ db-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ (–æ—Å—Ç–∞–Ω–Ω—ñ 20 —Ä—è–¥–∫—ñ–≤):"
                        docker-compose -f ${COMPOSE_FILE} logs --tail=20 db || true
                        echo "\nüîó –î–æ—Å—Ç—É–ø–Ω—ñ —Å–µ—Ä–≤—ñ—Å–∏ –ø—ñ—Å–ª—è —Ä–æ–ª–±–µ–∫—É:"
                        echo "‚Ä¢ –ì–æ–ª–æ–≤–Ω–∏–π —Å–∞–π—Ç:   http://${EC2_IP}"
                        echo "‚Ä¢ Prometheus:      http://${EC2_IP}:9090"
                        echo "‚Ä¢ Grafana:         http://${EC2_IP}:3000"
                    '
                """
                echo "\n‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–∏–π –¥–µ–ø–ª–æ–π –Ω–µ –≤–¥–∞–≤—Å—è, –∞–ª–µ rollback –≤–∏–∫–æ–Ω–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ!"
                echo "‚úÖ –°–∞–π—Ç —ñ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ø—ñ–¥–Ω—è—Ç—ñ –∑ DockerHub. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ä–æ–±–æ—Ç—É —Å–µ—Ä–≤—ñ—Å—ñ–≤ –≤—Ä—É—á–Ω—É –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏ –≤–∏—â–µ."
            }
        }

        success {
            script {
                echo "üéâ –†–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"

                def publicIp = ""
                try {
                    publicIp = sh(
                        script: """
                            ssh -i ${AWS_SSH_KEY} -o StrictHostKeyChecking=no \
                                ${params.EC2_USER}@${params.EC2_IP} \
                                'curl -s http://checkip.amazonaws.com 2>/dev/null || echo ${params.EC2_IP}'
                        """,
                        returnStdout: true
                    ).trim()
                } catch (Exception e) {
                    publicIp = params.EC2_IP
                }

                def tagInfo = "–ü—Ä–æ–ø—É—â–µ–Ω–æ (SKIP_DOCKERHUB=true)"
                def tagsList = "–ü—Ä–æ–ø—É—â–µ–Ω–æ (SKIP_DOCKERHUB=true)"

                if (!params.SKIP_DOCKERHUB) {
                    // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç–µ–≥–∏ DockerHub
                    tagInfo = sh(
                        script: """
                            curl -s https://hub.docker.com/v2/repositories/justendray/feedback_app/tags?page_size=1 | jq -r '.results[0] | "–¢–µ–≥: \\(.name), –î–∞—Ç–∞: \\(.last_updated)"'
                        """,
                        returnStdout: true
                    ).trim()

                    tagsList = sh(
                        script: """
                            curl -s https://hub.docker.com/v2/repositories/justendray/feedback_app/tags?page_size=5 | jq -r '.results[] | "\\(.name) | \\(.last_updated)"' | paste -sd ';' -
                        """,
                        returnStdout: true
                    ).trim()
                }

                echo """
üéâ –†–û–ó–ì–û–†–¢–ê–ù–ù–Ø –£–°–ü–Ü–®–ù–û –ó–ê–í–ï–†–®–ï–ù–û!

üìä –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üì± –î–æ–¥–∞—Ç–æ–∫: http://${publicIp}
üîê –ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å: http://${publicIp}/feedback_page
üè• Health Check: http://${publicIp}/health
üîç Prometheus: http://${publicIp}:9090
üîç Grafana: http://${publicIp}:3000

üîß –î–µ—Ç–∞–ª—ñ –∑–±—ñ—Ä–∫–∏:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ –ù–æ–º–µ—Ä –∑–±—ñ—Ä–∫–∏: ${env.BUILD_NUMBER}
‚Ä¢ EC2 IP: ${params.EC2_IP}
‚Ä¢ DockerHub: ${params.SKIP_DOCKERHUB ? '–ü—Ä–æ–ø—É—â–µ–Ω–æ' : '–û–Ω–æ–≤–ª–µ–Ω–æ'}

üê≥ DockerHub —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ –û—Å—Ç–∞–Ω–Ω—ñ–π —Ç–µ–≥: ${tagInfo}
‚Ä¢ –î–æ—Å—Ç—É–ø–Ω—ñ —Ç–µ–≥–∏:
${tagsList.split(';').collect { "  - ${it}" }.join('\n')}

üõ†Ô∏è –ö–æ–º–∞–Ω–¥–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –Ω–∞ EC2:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
ssh -i your-key.pem ${params.EC2_USER}@${params.EC2_IP}
cd ${DEPLOY_DIR}

‚Ä¢ –°—Ç–∞—Ç—É—Å: docker-compose -f ${COMPOSE_FILE} ps
‚Ä¢ –õ–æ–≥–∏: docker-compose -f ${COMPOSE_FILE} logs
‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker-compose -f ${COMPOSE_FILE} restart
‚Ä¢ –ó—É–ø–∏–Ω–∫–∞: docker-compose -f ${COMPOSE_FILE} down
‚Ä¢ –û—á–∏—â–µ–Ω–Ω—è: docker system prune -f

‚ö†Ô∏è  –í–ê–ñ–õ–ò–í–û: –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ Security Groups EC2!
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üìà –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ç–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–≥—ñ–≤ Flask: docker-compose -f ${COMPOSE_FILE} logs flask
‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–≥—ñ–≤ DB: docker-compose -f ${COMPOSE_FILE} logs postgres
‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤: docker stats
‚Ä¢ –í—ñ–ª—å–Ω–µ –º—ñ—Å—Ü–µ: df -h
‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä—Ç—ñ–≤: netstat -tulpn | grep -E ":(80|443|5000|5432|9090|3000)"

üìÖ –î–∞—Ç–∞ —Ä–æ–∑–≥–æ—Ä—Ç–∞–Ω–Ω—è: ${new Date().format('yyyy-MM-dd HH:mm:ss')}
"""
            }
        }
    }
}